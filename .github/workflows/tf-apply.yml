name: 'Terraform Apply'

on:
  pull_request:
    types: 
    - closed

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  TF_VAR_azure_swa_pat: "${{ secrets.AZURE_SWA_PAT }}"

jobs:
  terraform-apply:
    name: 'Terraform Apply'
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    environment: production
    #needs: [terraform-plan]

    env:
      TF_VAR_runner_ip: ""
    
    steps:
    - name: Check if PR was merged
      run: |
        if [ "${{ github.event.pull_request.merged }}" = "true" ]; then
          echo "The PR was merged!"
        else
          echo "The PR was closed without merging."
        fi
    #Get the IP address of the GitHub Actions runner
    - name: Get GitHub Actions Runner IP
      id: get-runner-ip
      run: |
          IP=$(curl -s https://api.ipify.org)
          echo "Runner IP: $IP"
          echo "TF_VAR_runner_ip=$IP/32" >> $GITHUB_ENV
    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -var="runner-ip=${{ env.TF_VAR_runner_ip }}" -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        echo "Captured terraform plan exitcode: $exitcode"
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        fi
    
    - name: Debug exit code
      run: |
        echo "Terraform plan exit code: ${{ steps.tf-plan.outputs.exitcode }}"

    # Terraform Apply
    - name: Terraform Apply
      if: ${{ steps.tf-plan.outputs.exitcode == '2' }}
      run: terraform apply -auto-approve tfplan
