name: 'Terraform Plan'

on:
  pull_request:
    branches:
    - main

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  TF_VAR_azure_swa_pat: "${{ secrets.AZURE_SWA_PAT }}"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed') }}
    runs-on: ubuntu-latest
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
      TF_VAR_runner_ip: ""
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:   
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
    
    # Login to Azure CLI to support temporary runner IP allow-list
    - name: Setup Azure CLI
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    #Get the IP address of the GitHub Actions runner
    - name: Get GitHub Actions Runner IP
      id: get-runner-ip
      run: |
          IP=$(curl -s https://api.ipify.org)
          echo "Runner IP: $IP"
          echo "TF_VAR_runner_ip=$IP/32" >> $GITHUB_ENV
          echo "runner_ip=$IP" >> $GITHUB_OUTPUT

    - name: Get storage accounts from module matching 'mta-sts'
      id: get-storage-accounts
      run: |
        # Extract pairs of storage account name and resource group name separated by a comma
        PAIRS=$(terraform state pull | jq -r '
          .resources[]
          | select(
              .type == "azurerm_storage_account"
              and (.module != null)
              and (.name | test("mta-sts"))
            )
          | .instances[]
          | "\(.attributes.name),\(.attributes.resource_group_name)"
        ' | sort -u)

        echo "Found storage accounts and resource groups:"
        echo "$PAIRS"

        # Set output for later steps; replacing newlines with semicolons to keep it as one string
        FORMATTED_OUTPUT=$(echo "$PAIRS" | paste -sd ";" -)
        echo "::set-output name=storage_accounts_and_rgs::$FORMATTED_OUTPUT"

    - name: Temporarily Allow Runner IP
      run: |
        echo "START"
        IFS=';' read -ra PAIRS <<< "${{ steps.get_storage_accounts.outputs.storage_accounts_and_rgs }}"  
        echo "preLoop"
        for pair in "${PAIRS[@]}"; do
          echo "IN LOOP"
          IFS=',' read -ra PARTS <<< "$pair"
          STORAGE_ACCOUNT="${PARTS[0]}"
          RESOURCE_GROUP="${PARTS[1]}"
          echo "Storage account: $STORAGE_ACCOUNT, Resource group: $RESOURCE_GROUP"
          az storage account network-rule add --resource-group $RESOURCE_GROUP  --account-name $STORAGE_ACCOUNT --ip-address ${{ env.TF_VAR_runner_ip }}
          # Do something with STORAGE_ACCOUNT and RESOURCE_GROUP
        done
        echo "OUT LOOP"
        exit 1
    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -var="runner-ip=${{ env.TF_VAR_runner_ip }}" -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else 
          exit 0
        fi
        
    # Save plan to artifacts  
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: tfplan
        
    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)
        
        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
        
    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
    # If this is a PR post the changes
    - name: Push Terraform Output to PR
      if: github.ref != 'refs/heads/main'
      uses: actions/github-script@v7
      env:
        SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })
    - name: Remove Runner IP from Storage Account Firewall
      if: always()
      run: |
        
    - name: Remove Allowed Runnder IPs Runner IP
      run: |
        for pair in "${PAIRS[@]}"; do
          IFS=',' read -ra PARTS <<< "${{ steps.get-storage-accounts.outputs.storage_accounts_and_rgs }}"
          STORAGE_ACCOUNT="${PARTS[0]}"
          RESOURCE_GROUP="${PARTS[1]}"
          echo "Storage account: $STORAGE_ACCOUNT, Resource group: $RESOURCE_GROUP"
          az storage account network-rule remove --resource-group $RESOURCE_GROUP  --account-name $STORAGE_ACCOUNT --ip-address ${{ env.TF_VAR_runner_ip }}
        done                
#  terraform-apply:
#    name: 'Terraform Apply'
#    if: github.event_name == 'pull_request' && github.event.action == 'closed'
#    runs-on: ubuntu-latest
#    environment: production
#    #needs: [terraform-plan]

#    env:
#      TF_VAR_runner_ip: ""
    
#    steps:
    #Get the IP address of the GitHub Actions runner
#    - name: Get GitHub Actions Runner IP
#      id: get-runner-ip
#      run: |
#          IP=$(curl -s https://api.ipify.org)
#          echo "Runner IP: $IP"
#          echo "TF_VAR_runner_ip=$IP/32" >> $GITHUB_ENV
#    
#    # Checkout the repository to the GitHub Actions runner
#    - name: Checkout
#      uses: actions/checkout@v4#

#    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#    - name: Setup Terraform
#      uses: hashicorp/setup-terraform@v3
#
#    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#    - name: Terraform Init
#      run: terraform init

    # Generates an execution plan for Terraform
    # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
 #   - name: Terraform Plan
 #     id: tf-plan
 #     run: |
 #       export exitcode=0
 #       terraform plan -detailed-exitcode -var="runner-ip=${{ env.TF_VAR_runner_ip }}" -no-color -out tfplan || export exitcode=$?

#        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        
#        if [ $exitcode -eq 1 ]; then
#          echo Terraform Plan Failed!
#          exit 1
#        else 
#          exit 0
#        fi
        

    # Terraform Apply
#    - name: Terraform Apply
#      if: steps.tf-plan.outputs.exitcode == '2'
#      run: terraform apply -auto-approve tfplan
